/* eslint-disable indent */
import TelegramBot from 'node-telegram-bot-api';
import { notifyCache } from '..';
import { userCommands } from '../commands';
import { notifyGroupKeyboard } from '../keyboards/notify.keyboard';
import { scheduleKeyboard } from '../keyboards/schedule.keyboard';
import {
  timeWeekendKeyboard,
  timeWorkdayKeyboard,
} from '../keyboards/time.keyboard';
import { User } from '../models/user.model';
import { ECommand } from '../types/comands.type';
import { EDate } from '../types/date.type';
import { EEvent, TQueryData } from '../types/query-data.type';

export const callbackQuery =
  (bot: TelegramBot) => async (query: TelegramBot.CallbackQuery) => {
    console.log('üñ®Ô∏è ~ query', query);
    if (!query.message || !query.data) return;

    const data: TQueryData = JSON.parse(query.data);

    if (data.event === EEvent.subscribeDate) {
      if ([EDate.Mon, EDate.Tue].includes(data.date)) {
        // case of workday schedule
        await bot.editMessageReplyMarkup(
          {
            inline_keyboard: timeWorkdayKeyboard(data.date),
          },
          {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
          },
        );

        return bot.answerCallbackQuery(query.id);
      }

      // case of weekend schedule
      await bot.editMessageReplyMarkup(
        {
          inline_keyboard: timeWeekendKeyboard(data.date),
        },
        {
          message_id: query.message.message_id,
          chat_id: query.message.chat.id,
        },
      );

      return bot.answerCallbackQuery(query.id);
    }

    if (data.event === EEvent.subscribeTime) {
      try {
        const user = await User.findOne({ tlgId: query.from.id });
        if (!user) {
          return bot.sendMessage(query.from.id, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å');
        }

        const prevSubscription = user.subs.find(
          (sub) => sub.date === data.date && sub.time === data.time,
        );
        if (!prevSubscription) {
          user.subs.push({ date: data.date, time: data.time });
          await user.save();
        }
      } catch (e: any) {
        console.log(e.message);
        return bot.sendMessage(
          query.from.id,
          '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
        );
      }
      await bot.answerCallbackQuery(query.id);

      // delete message before showing result
      await bot.deleteMessage(
        query.message.chat.id,
        String(query.message.message_id),
      );

      return bot.sendMessage(
        query.message.chat.id,
        `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ ${ECommand.schedule}`,
      );
    }

    if (data.event === EEvent.unsubscribeTime) {
      try {
        const user = await User.findOne({ tlgId: query.from.id });
        if (!user) {
          return bot.sendMessage(query.from.id, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å');
        }
        user.subs = user.subs.filter(
          (sub) => !(sub.date === data.date && sub.time === data.time),
        );
        await user.save();

        if (!user.subs.length) {
          // delete message before showing result
          await bot.deleteMessage(
            query.message.chat.id,
            String(query.message.message_id),
          );
          await bot.sendMessage(
            query.from.id,
            `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ ${ECommand.subscribe}`,
          );
          return bot.answerCallbackQuery(query.id);
        }

        await bot.editMessageReplyMarkup(
          {
            inline_keyboard: scheduleKeyboard(user),
          },
          {
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
          },
        );
        await bot.answerCallbackQuery(query.id);
      } catch (e: any) {
        console.log(e.message);
        return bot.sendMessage(
          query.from.id,
          '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
        );
      }
    }

    if (data.event === EEvent.quit) {
      await bot.deleteMessage(
        query.message.chat.id,
        String(query.message.message_id),
      );
      await bot.answerCallbackQuery(query.id);
    }

    if (data.event === EEvent.auth) {
      try {
        // delete message before showing result
        await bot.deleteMessage(
          query.message.chat.id,
          String(query.message.message_id),
        );

        const user = await User.findOne({ tlgId: data.tlgId });
        if (!user) {
          return bot.sendMessage(
            query.from.id,
            '–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
          );
        }

        user.isAuthorized = true;
        await user.save();
        await bot.setMyCommands(userCommands, {
          scope: {
            type: 'chat',
            chat_id: user.tlgId,
          },
        });

        await bot.sendMessage(
          data.tlgId,
          '–¢–µ–ø–µ—Ä—å –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
        );
        await bot.answerCallbackQuery(query.id);
        return bot.sendMessage(
          query.from.id,
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tlgId} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.`,
        );
      } catch (e: any) {
        console.log(e.message);
        return bot.sendMessage(
          query.from.id,
          '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
        );
      }
    }

    if (data.event === EEvent.notifyAll) {
      try {
        const text = notifyCache.get(query.message.chat.id)?.text;
        if (!text) {
          return bot.sendMessage(
            query.message.chat.id,
            '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.',
          );
        }
        // delete message before showing result
        await bot.deleteMessage(
          query.message.chat.id,
          String(query.message.message_id),
        );

        const users = await User.find({
          tlgId: { $ne: query.message.chat.id },
        });

        await Promise.all(
          users.map((user) => bot.sendMessage(user.tlgId, text)),
        );

        await bot.sendMessage(query.message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
        await bot.answerCallbackQuery(query.id);
      } catch (e: any) {
        console.log(e.message);
        return bot.sendMessage(
          query.from.id,
          '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
        );
      }
    }

    if (data.event === EEvent.notifyGroup) {
      await bot.editMessageReplyMarkup(
        {
          inline_keyboard: notifyGroupKeyboard,
        },
        {
          message_id: query.message.message_id,
          chat_id: query.message.chat.id,
        },
      );
      await bot.answerCallbackQuery(query.id);
    }

    if (data.event === EEvent.notifyGroupTime) {
      const text = notifyCache.get(query.message.chat.id)?.text;
      if (!text) {
        return bot.sendMessage(
          query.message.chat.id,
          '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.',
        );
      }

      const users = await User.find({
        tlgId: { $ne: query.message.chat.id },
        subs: { $elemMatch: { date: data.date, time: data.time } },
      });

      // delete message before showing result
      await bot.deleteMessage(
        query.message.chat.id,
        String(query.message.message_id),
      );

      if (!users.length) {
        await bot.sendMessage(
          query.message.chat.id,
          '–ù–∞ –¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.',
        );
        return bot.answerCallbackQuery(query.id);
      }

      await Promise.all(users.map((user) => bot.sendMessage(user.tlgId, text)));

      await bot.sendMessage(query.message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
      await bot.answerCallbackQuery(query.id);
    }
  };
